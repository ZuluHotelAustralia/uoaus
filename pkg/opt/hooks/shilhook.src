use uo;
use os;
use cfgfile;

include "include/attributes";
include "include/classes";

const DEFAULT_SETTING_SKILL_ALWAYS_GAIN_UNTIL  := 50.0;
const DEFAULT_SETTING_SKILL_CHECK_MAX_CHANCE  := 100;
const DEFAULT_SETTING_SKILL_CHECK_MIN_CHANCE  := 0;

var always_gain_until;
var min_chance;
var max_chance;

program shilskill()
  always_gain_until := Cint(Cdbl(DEFAULT_SETTING_SKILL_ALWAYS_GAIN_UNTIL) * 10);
  min_chance        := Cint(Cint(DEFAULT_SETTING_SKILL_CHECK_MIN_CHANCE) * 10);
  max_chance        := Cint(Cint(DEFAULT_SETTING_SKILL_CHECK_MAX_CHANCE) * 10);
  return 1;
endprogram

exported function ShilCheckSkill(who, skillid, difficulty, points)


  difficulty := CDbl(difficulty);
  if(difficulty == error)
    return 0;
//  elseif(who.cmdlevel)
//    return 1;
  elseif(difficulty == 0.0)
    return 1;
  else
    difficulty := difficulty * 10.0;
  endif
  var chance;
  var attributeid := GetAttributeIdBySkillId(skillid);
  var baseskill  := GetBaseSkillBaseValue(who, skillid);
  var tempmod  := GetSkillTemporaryModBaseValue(who, skillid);
  var intrisicmod  := GetSkillIntrinsicModBaseValue(who, skillid);
  var effective  := baseskill + tempmod + intrisicmod;
  var hunger  := CInt(GetObjProperty(who, "HungerLevel"));
  //SendSysMessage(who, "Before Class bonus check");  
  
  
  var classbonus := ClasseBonusBySkillId( who, skillid );
  case(hunger)
     0: effective := (effective - 50); points := (points * 0.95);
     1: effective := (effective + 50); points := (points * 1.05);
     5:
     6: effective := (effective - 10); points := (points * 0.95);
     7:
     8: effective := (effective - 30); points := (points * 0.97);
     9:
    10: effective := (effective - 50); points := (points * 0.95);
  endcase
  if(effective < 0)
    effective := 0;
  endif
  if(difficulty < 0)
    chance := effective + ((difficulty+10) * 15);
  else
    chance := ((effective - difficulty) * 2.5 + 500) ;
    var temp_chance;
    if(effective != baseskill)
      temp_chance := (baseskill - difficulty) * 2.5 + 500;
    else
      temp_chance := chance;
    endif
    if(temp_chance < min_chance)
      temp_chance := min_chance;
    elseif(temp_chance > max_chance)
      temp_chance := max_chance;
    endif
    if(points != 0)
      points  := points * ((1000-temp_chance) / 1000);
    endif
  endif
 chance := chance + classbonus*10;
  if(chance < min_chance)
    chance := min_chance;
  elseif(chance > max_chance)
    chance := max_chance;
  endif

var gainmod := cint(baseskill/10);
  case(hunger)
     0: points  := points*6;
     1: points  := points*6;
     5: points  := points*5;
     6: points  := points*5;
     7: points  := points*4;
     8: points  := points*4;
     9: points  := points*3;
    10: points  := points*3;
     11: points  := points*2;
     12: points  := points*2;
     13: points  := points;
     14: points  := points;
    15: points  := 0;
endcase

var skills_state_array   := GetObjProperty( who, "SkillsState" );
	if( !skills_state_array )
		skills_state_array := array;
	endif
	
	var skill_state := skills_state_array[skillid+1];
	
	if( skill_state = "d" )
		var rawskill := GetEffectiveSkill( who, skillid );
		var amount   := 1;
		points := (rawskill - amount);
		SetBaseSkillBaseValue(who, skillid, (rawskill - amount));
		SendSysMessage(who, "You're forgetting what you have learnt.");
		return;
		
	elseif( skill_state = "l" )
		return;
	endif
	
	
	var randomised:=RandomInt(1000);
//SendSysMessage(who, "Ignore this: " + skillid +","+difficulty+","+points);
//SendSysMessage(who, "Chance: " + chance + ","+randomised );
  if(randomised < chance)
    if(points > 0)
    SendSysMessage(who, "Success" ); 
      AwardPoints(who, skillid, points);
    endif
    return 1;
  else
    if(baseskill < always_gain_until)
      if(points > 0)
        AwardPoints(who, skillid, points);
      endif
    endif
    return 0;
  endif
endfunction
